#include <iostream>
using namespace std;

struct Node {
    int data;
    Node* prev;
    Node* next;
    Node(int val) : data(val), prev(nullptr), next(nullptr) {}
};
class DoublyLinkedList {
private:
    Node* head;
    Node* tail;
public:
    DoublyLinkedList() : head(nullptr), tail(nullptr) {}
    void push_back(int val) {
        Node* newNode = new Node(val);
        if (!head) {
          head = tail = newNode;
        } else {
          tail->next = newNode;
          newNode->prev = tail;
          tail = newNode;
        }
    }
    void deleteByValue(int val) {
        Node* temp = head;
        while (temp && temp->data != val) {
          temp = temp->next;
        }
        if (!temp) return;
        if (temp->prev) temp->prev->next = temp->next;
        else head = temp->next;
        if (temp->next) temp->next->prev = temp->prev;
        else tail = temp->prev;
        delete temp;
    }
    void insertAfter(int key, int val) {
        Node* temp = head;
        while (temp && temp->data != key) {
            temp = temp->next;
        }
        if (!temp) return;

        Node* newNode = new Node(val);
        newNode->next = temp->next;
        newNode->prev = temp;

        if (temp->next) temp->next->prev = newNode;
        else tail = newNode;

        temp->next = newNode;
    }
    void insertBefore(int key, int val) {
        Node* temp = head;
        while (temp && temp->data != key) {
            temp = temp->next;
        }
        if (!temp) return;
        Node* newNode = new Node(val);
        newNode->next = temp;
        newNode->prev = temp->prev;
        if (temp->prev) temp->prev->next = newNode;
        else head = newNode;
        temp->prev = newNode;
    }
    bool isSymmetric() {
        Node* left = head;
        Node* right = tail;
        while (left && right && left != right && left->prev != right) {
            if (left->data != right->data)
                return false;
            left = left->next;
            right = right->prev;
        }
        return true;
    }
};
